(()=>{"use strict";var n={837:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var u=this[c][0];null!=u&&(a[u]=!0)}for(var m=0;m<n.length;m++){var l=[].concat(n[m]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},350:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},890:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(350),o=t.n(r),i=t(837),a=t.n(i)()(o());a.push([n.id,'body {\n  background-color: rgb(0, 53, 53);\n  font-size: 24px;\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n}\n\ninput[type="number"] {\n  -webkit-appearance: textfield;\n  -moz-appearance: textfield;\n  appearance: textfield;\n}\n\n.search-bar {\n  padding-inline: 1em;\n  margin-bottom: 1em;\n\n  border-radius: 50px;\n\n  text-transform: uppercase;\n  font-size: 24px;\n}\n\n.resource-container {\n  display: grid;\n  grid-template-columns: 300px 2fr 1fr;\n  gap: 0.5em;\n}\n\n.resource-content {\n  grid-column: 1/2;\n}\n\n.page-title {\n  grid-column: 1/2;\n  margin: 0 auto;\n\n  font-size: 2em;\n  text-transform: uppercase;\n  font-weight: bold;\n  color: whitesmoke;\n}\n\n.resource-card {\n  padding-inline: 1em;\n  padding-block: 0.8em;\n  margin-bottom: 0.5em;\n  grid-column: 1/2;\n\n  background-color: rgb(184, 134, 11);\n  font-weight: bold;\n  text-transform: uppercase;\n}\n\n.resource-card.common {\n  border-left: 10px solid gray;\n}\n.resource-card.uncommon {\n  border-left: 10px solid green;\n}\n.resource-card.rare {\n  border-left: 10px solid blue;\n}\n.resource-card.exotic {\n  border-left: 10px solid yellow;\n}\n.resource-card.unique {\n  border-left: 10px solid white;\n}\n\n.resource-card.building {\n  background-color: grey;\n  border-left: 10px solid brown;\n}\n\n.resource-card:hover {\n  background-color: rgb(184, 134, 11, 0.8);\n  cursor: pointer;\n  transform: translateX(5px);\n}\n\n.resource-card.selected {\n  background-color: rgb(255, 255, 255, 0.8);\n  transform: translateX(5px);\n}\n\n.recipe-container {\n  display: flex;\n  flex-direction: column;\n  gap: 1em;\n  align-self: baseline;\n\n  position: sticky;\n  top: 100px;\n}\n\n.search-bar {\n  position: sticky;\n  top: 1em;\n}\n.craft-container,\n.details-container {\n  padding-inline: 1em;\n  padding-block: 0.5em;\n\n  display: none;\n\n  background-color: darkgrey;\n  text-transform: uppercase;\n}\n\n.craft-card,\n.details-card {\n  margin-block: 0.5em;\n  display: grid;\n  grid-template-columns: 1fr 50px;\n}\n\n.craft-label {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.craft-title {\n  font-weight: bold;\n}\n\n.craft-quantity {\n  display: block;\n  box-sizing: border-box;\n  width: 50px;\n  text-align: center;\n\n  background-color: rgb(0, 0, 0, 0.2);\n  border: none;\n  border-radius: 10px;\n\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n  font-size: 24px;\n}\n.craft-ingredient,\n.details-ingredient {\n  margin-right: 2em;\n}\n\n.craft-amount,\n.details-amount {\n  justify-self: baseline;\n}\n\n.craft-amount::before,\n.details-amount::before {\n  content: "x";\n  text-transform: lowercase;\n}\n\n.show {\n  display: block;\n}\n\n.hide {\n  display: none;\n}\n',"",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,gCAAgC;EAChC,eAAe;EACf,gDAAgD;AAClD;;AAEA;EACE,6BAA6B;EAC7B,0BAA0B;EAC1B,qBAAqB;AACvB;;AAEA;EACE,mBAAmB;EACnB,kBAAkB;;EAElB,mBAAmB;;EAEnB,yBAAyB;EACzB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,oCAAoC;EACpC,UAAU;AACZ;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;EAChB,cAAc;;EAEd,cAAc;EACd,yBAAyB;EACzB,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,mBAAmB;EACnB,oBAAoB;EACpB,oBAAoB;EACpB,gBAAgB;;EAEhB,mCAAmC;EACnC,iBAAiB;EACjB,yBAAyB;AAC3B;;AAEA;EACE,4BAA4B;AAC9B;AACA;EACE,6BAA6B;AAC/B;AACA;EACE,4BAA4B;AAC9B;AACA;EACE,8BAA8B;AAChC;AACA;EACE,6BAA6B;AAC/B;;AAEA;EACE,sBAAsB;EACtB,6BAA6B;AAC/B;;AAEA;EACE,wCAAwC;EACxC,eAAe;EACf,0BAA0B;AAC5B;;AAEA;EACE,yCAAyC;EACzC,0BAA0B;AAC5B;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,QAAQ;EACR,oBAAoB;;EAEpB,gBAAgB;EAChB,UAAU;AACZ;;AAEA;EACE,gBAAgB;EAChB,QAAQ;AACV;AACA;;EAEE,mBAAmB;EACnB,oBAAoB;;EAEpB,aAAa;;EAEb,0BAA0B;EAC1B,yBAAyB;AAC3B;;AAEA;;EAEE,mBAAmB;EACnB,aAAa;EACb,+BAA+B;AACjC;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;AACrB;AACA;EACE,iBAAiB;AACnB;;AAEA;EACE,cAAc;EACd,sBAAsB;EACtB,WAAW;EACX,kBAAkB;;EAElB,mCAAmC;EACnC,YAAY;EACZ,mBAAmB;;EAEnB,gDAAgD;EAChD,eAAe;AACjB;AACA;;EAEE,iBAAiB;AACnB;;AAEA;;EAEE,sBAAsB;AACxB;;AAEA;;EAEE,YAAY;EACZ,yBAAyB;AAC3B;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,aAAa;AACf",sourcesContent:['body {\r\n  background-color: rgb(0, 53, 53);\r\n  font-size: 24px;\r\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n}\r\n\r\ninput[type="number"] {\r\n  -webkit-appearance: textfield;\r\n  -moz-appearance: textfield;\r\n  appearance: textfield;\r\n}\r\n\r\n.search-bar {\r\n  padding-inline: 1em;\r\n  margin-bottom: 1em;\r\n\r\n  border-radius: 50px;\r\n\r\n  text-transform: uppercase;\r\n  font-size: 24px;\r\n}\r\n\r\n.resource-container {\r\n  display: grid;\r\n  grid-template-columns: 300px 2fr 1fr;\r\n  gap: 0.5em;\r\n}\r\n\r\n.resource-content {\r\n  grid-column: 1/2;\r\n}\r\n\r\n.page-title {\r\n  grid-column: 1/2;\r\n  margin: 0 auto;\r\n\r\n  font-size: 2em;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  color: whitesmoke;\r\n}\r\n\r\n.resource-card {\r\n  padding-inline: 1em;\r\n  padding-block: 0.8em;\r\n  margin-bottom: 0.5em;\r\n  grid-column: 1/2;\r\n\r\n  background-color: rgb(184, 134, 11);\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n}\r\n\r\n.resource-card.common {\r\n  border-left: 10px solid gray;\r\n}\r\n.resource-card.uncommon {\r\n  border-left: 10px solid green;\r\n}\r\n.resource-card.rare {\r\n  border-left: 10px solid blue;\r\n}\r\n.resource-card.exotic {\r\n  border-left: 10px solid yellow;\r\n}\r\n.resource-card.unique {\r\n  border-left: 10px solid white;\r\n}\r\n\r\n.resource-card.building {\r\n  background-color: grey;\r\n  border-left: 10px solid brown;\r\n}\r\n\r\n.resource-card:hover {\r\n  background-color: rgb(184, 134, 11, 0.8);\r\n  cursor: pointer;\r\n  transform: translateX(5px);\r\n}\r\n\r\n.resource-card.selected {\r\n  background-color: rgb(255, 255, 255, 0.8);\r\n  transform: translateX(5px);\r\n}\r\n\r\n.recipe-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1em;\r\n  align-self: baseline;\r\n\r\n  position: sticky;\r\n  top: 100px;\r\n}\r\n\r\n.search-bar {\r\n  position: sticky;\r\n  top: 1em;\r\n}\r\n.craft-container,\r\n.details-container {\r\n  padding-inline: 1em;\r\n  padding-block: 0.5em;\r\n\r\n  display: none;\r\n\r\n  background-color: darkgrey;\r\n  text-transform: uppercase;\r\n}\r\n\r\n.craft-card,\r\n.details-card {\r\n  margin-block: 0.5em;\r\n  display: grid;\r\n  grid-template-columns: 1fr 50px;\r\n}\r\n\r\n.craft-label {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n.craft-title {\r\n  font-weight: bold;\r\n}\r\n\r\n.craft-quantity {\r\n  display: block;\r\n  box-sizing: border-box;\r\n  width: 50px;\r\n  text-align: center;\r\n\r\n  background-color: rgb(0, 0, 0, 0.2);\r\n  border: none;\r\n  border-radius: 10px;\r\n\r\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n  font-size: 24px;\r\n}\r\n.craft-ingredient,\r\n.details-ingredient {\r\n  margin-right: 2em;\r\n}\r\n\r\n.craft-amount,\r\n.details-amount {\r\n  justify-self: baseline;\r\n}\r\n\r\n.craft-amount::before,\r\n.details-amount::before {\r\n  content: "x";\r\n  text-transform: lowercase;\r\n}\r\n\r\n.show {\r\n  display: block;\r\n}\r\n\r\n.hide {\r\n  display: none;\r\n}\r\n'],sourceRoot:""}]);const c=a},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],c=0;c<n.length;c++){var u=n[c],m=r.base?u[0]+r.base:u[0],l=i[m]||0,d="".concat(m," ").concat(l);i[m]=l+1;var s=t(d),f={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==s)e[s].references++,e[s].updater(f);else{var p=o(f,r);r.byIndex=c,e.splice(c,0,{identifier:d,updater:p,references:1})}a.push(d)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var c=t(i[a]);e[c].references--}for(var u=r(n,o),m=0;m<i.length;m++){var l=t(i[m]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=u}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),i=t(569),a=t.n(i),c=t(565),u=t.n(c),m=t(216),l=t.n(m),d=t(589),s=t.n(d),f=t(890),p={};function y(n){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},y(n)}function A(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,(void 0,o=function(n,e){if("object"!==y(n)||null===n)return n;var t=n[Symbol.toPrimitive];if(void 0!==t){var r=t.call(n,"string");if("object"!==y(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(n)}(r.key),"symbol"===y(o)?o:String(o)),r)}var o}function b(n,e,t){return e&&A(n.prototype,e),t&&A(n,t),Object.defineProperty(n,"prototype",{writable:!1}),n}p.styleTagTransform=s(),p.setAttributes=u(),p.insert=a().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=l(),e()(f.Z,p),f.Z&&f.Z.locals&&f.Z.locals;var g,v={all:g=[],findByName:function(n){return g.find((function(e){return e.name===n}))}},h=b((function n(e,t,r){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.name=t,this.element=e,this.rarity=r,this.type="resource",v.all.push(this)}));function B(n){return B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},B(n)}function w(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,(void 0,o=function(n,e){if("object"!==B(n)||null===n)return n;var t=n[Symbol.toPrimitive];if(void 0!==t){var r=t.call(n,"string");if("object"!==B(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(n)}(r.key),"symbol"===B(o)?o:String(o)),r)}var o}new h("fe","iron","common"),new h("c6hn","benzene","common"),new h("membrane","membrane","common"),new h("memory","memory substrate","common"),new h("al","aluminum","common"),new h("ta","tantalum","common"),new h("W","tungsten","common"),new h("be","beryllium","common"),new h("cu","copper","common"),new h("ni","nickel","common"),new h("co","cobalt","common"),new h("xe","xenon","common"),new h("ar","argon","common"),new h("ti","titanium","common"),new h("hncn","alkanes","common"),new h("cl","chlorine","common"),new h("xf4","tetraflourides","common"),new h("il","ionic liquids","common"),new h("au","gold","common"),new h("nd","neodymium","common"),new h("sb","antimony","common"),new h("v","vanadium","common"),new h("pd","paladium","common"),new h("rc","rothicite","common"),new h("li","lithium","common"),new h("tsn","tasine","common"),new h("yb","ytterbium","common"),new h("vr","veryl","common"),new h("vy","vytinium","common"),new h("pu","plutonium","common"),new h("ag","silver","common"),new h("lube","lubricant","common"),new h("solv","solvent","common"),new h("cs","caesium","common"),new h("ie","indicite","common"),new h("eu","europium","common"),new h("fibr","fiber","common"),new h("cos","cosmetic","common"),new h("poly","polymer","common"),new h("dy","dysporium","common"),new h("u","uranium","common"),new h("ad","aldumite","common"),new h("bio","biosuppressant","common"),new h("adh","adhesive","common"),new h("adh","sealant","common");var E=function(){var n=[];return{all:n,findByName:function(e){return n.find((function(n){return n.name===e}))}}}(),C=function(){function n(e,t,r){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.name=e,this.rarity=t,this.ingredients=n.cost(r),this.type="recipe",E.all.push(this)}var e,t,r;return e=n,t=[{key:"breakdown",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,e=[];return this.ingredients.forEach((function(t){var r={};"resource"===t.item.type&&(r.item=t.item,r.amount=t.amount*n),e.push(r)})),e}},{key:"consolidate",value:function(){return this.breakdown()}}],r=[{key:"cost",value:function(n){var e=[];return n.forEach((function(n){var t={};t.item=n[0],t.amount=n[1],e.push(t)})),e}}],t&&w(e.prototype,t),r&&w(e,r),Object.defineProperty(e,"prototype",{writable:!1}),n}(),x=v.findByName("iron"),N=v.findByName("aluminum"),k=v.findByName("nickel"),S=v.findByName("cobalt"),L=v.findByName("tetraflourides"),j=v.findByName("ionic liquids"),q=v.findByName("fiber"),P=v.findByName("cosmetic"),T=v.findByName("copper"),O=v.findByName("beryllium"),z=v.findByName("silver");function D(n){return D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},D(n)}function U(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,(void 0,o=function(n,e){if("object"!==D(n)||null===n)return n;var t=n[Symbol.toPrimitive];if(void 0!==t){var r=t.call(n,"string");if("object"!==D(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(n)}(r.key),"symbol"===D(o)?o:String(o)),r)}var o}new C("adaptive frame","common",[[x,1],[N,1]]),new C("isocentered magnet","common",[[k,1],[S,1]]),new C("isotopic coolant","common",[[L,1],[j,1]]),new C("mag pressure tank","uncommon",[[k,1],[N,2]]),new C("polytextile","uncommon",[[q,2],[P,1]]),new C("reactive gauge","common",[[T,1],[N,2]]),new C("tau grade rheostat","uncommon",[[O,1],[T,1]]),new C("zero wire","common",[[z,1],[T,1]]);var M=function(){var n=[];return{all:n,findByName:function(e){return n.find((function(n){return n.name===e}))}}}(),Z=function(){function n(e,t,r){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.name=e,this.rarity=t,this.ingredients=n.cost(r),this.type="compound",M.all.push(this)}var e,t,r;return e=n,t=[{key:"breakdown",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,e=[],t={};return this.ingredients.forEach((function(r){t={},"resource"===r.item.type&&(t.item=r.item,t.amount=r.amount*n,e.push(t)),"recipe"===r.item.type&&r.item.breakdown().forEach((function(o){(t={}).item=o.item,t.amount=o.amount*r.amount*n,t.parent=r.item.name,e.push(t)}))})),e}},{key:"consolidate",value:function(){var n=this.breakdown().reduce((function(n,e){var t=e.item.name;return null==n[t]&&(n[t]=0),n[t]+=e.amount,n}),{}),e=Object.entries(n),t=[];return e.forEach((function(n){var e={};e.item=v.findByName(n[0]),e.amount=n[1],t.push(e)})),t}}],r=[{key:"cost",value:function(n){var e=[];return n.forEach((function(n){var t={};t.item=n[0],t.amount=n[1],e.push(t)})),e}}],t&&U(e.prototype,t),r&&U(e,r),Object.defineProperty(e,"prototype",{writable:!1}),n}(),I=v.findByName("nickel"),R=v.findByName("iron"),V=v.findByName("tungsten"),X=v.findByName("lubricant"),G=v.findByName("ionic liquids"),Q=v.findByName("membrane"),Y=v.findByName("alkanes"),W=v.findByName("gold"),F=v.findByName("neodymium"),H=v.findByName("antimony"),J=v.findByName("vanadium"),_=v.findByName("tantalum"),K=E.findByName("reactive gauge"),$=E.findByName("tau grade rheostat"),nn=E.findByName("isocentered magnet"),en=E.findByName("mag pressure tank"),tn=E.findByName("zero wire"),rn=E.findByName("isotopic coolant");function on(n){return on="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},on(n)}function an(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,(void 0,o=function(n,e){if("object"!==on(n)||null===n)return n;var t=n[Symbol.toPrimitive];if(void 0!==t){var r=t.call(n,"string");if("object"!==on(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(n)}(r.key),"symbol"===on(o)?o:String(o)),r)}var o}new Z("austentic manifold","uncommon",[[I,2],[K,1],[R,2]]),new Z("comm relay","uncommon",[[$,1],[nn,1]]),new Z("drilling rig","rare",[[V,3],[K,1],[X,2]]),new Z("molecular sieve","rare",[[en,1],[G,2],[Q,2]]),new Z("monopropellant","rare",[[en,1],[K,1],[Y,2]]),new Z("paramagnon conductor","rare",[[W,1],[F,1],[tn,3]]),new Z("positron battery","rare",[[$,1],[H,2],[J,2]]),new Z("semimetal wafer","rare",[[W,2],[H,2],[tn,1]]),new Z("supercooled magnet","rare",[[rn,1],[nn,1],[F,3]]),new Z("zero-g gimbal","rare",[[nn,1],[X,2],[_,2]]);var cn=function(){var n=[];return{all:n,findByName:function(e){return n.find((function(n){return n.name===e}))}}}(),un=function(){function n(e,t,r){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.name=e,this.rarity=t,this.ingredients=n.cost(r),this.type="exotic",cn.all.push(this)}var e,t,r;return e=n,t=[{key:"breakdown",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,e=[],t={};return this.ingredients.forEach((function(r){t={},"resource"===r.item.type&&(t.item=r.item,t.amount=r.amount*n,e.push(t)),"recipe"===r.item.type&&r.item.breakdown().forEach((function(o){(t={}).item=o.item,t.amount=o.amount*r.amount*n,t.parent=r.item.name,e.push(t)})),"compound"===r.item.type&&r.item.breakdown().forEach((function(o){(t={}).item=o.item,t.amount=o.amount*r.amount*n,t.parent=r.item.name,e.push(t)}))})),e}},{key:"consolidate",value:function(){var n=this.breakdown().reduce((function(n,e){var t=e.item.name;return null==n[t]&&(n[t]=0),n[t]+=e.amount,n}),{}),e=Object.entries(n),t=[];return e.forEach((function(n){var e={};e.item=v.findByName(n[0]),e.amount=n[1],t.push(e)})),t}}],r=[{key:"cost",value:function(n){var e=[];return n.forEach((function(n){var t={};t.item=n[0],t.amount=n[1],e.push(t)})),e}}],t&&an(e.prototype,t),r&&an(e,r),Object.defineProperty(e,"prototype",{writable:!1}),n}(),mn=v.findByName("dysporium"),ln=v.findByName("lithium"),dn=v.findByName("europium"),sn=v.findByName("solvent"),fn=v.findByName("polymer"),pn=v.findByName("paladium"),yn=v.findByName("uranium"),An=v.findByName("vanadium"),bn=E.findByName("tau grade rheostat"),gn=E.findByName("isotopic coolant"),vn=M.findByName("supercooled magnet"),hn=M.findByName("austentic manifold"),Bn=M.findByName("paramagnon conductor"),wn=M.findByName("positron battery"),En=M.findByName("semimetal wafer"),Cn=M.findByName("molecular sieve");function xn(n){return xn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},xn(n)}function Nn(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,(void 0,o=function(n,e){if("object"!==xn(n)||null===n)return n;var t=n[Symbol.toPrimitive];if(void 0!==t){var r=t.call(n,"string");if("object"!==xn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(n)}(r.key),"symbol"===xn(o)?o:String(o)),r)}var o}new un("control rod","exotic",[[mn,3],[hn,1],[gn,1]]),new un("microsend regulator","exotic",[[ln,2],[bn,1],[vn,1],[dn,4]]),new un("nuclear fuel rod","exotic",[[sn,2],[En,1],[yn,3]]),new un("power circuit","exotic",[[fn,2],[Bn,1],[pn,4],[wn,1]]),new un("sterile nanotubes","exotic",[[sn,2],[An,2],[Cn,1]]);var kn,Sn,Ln,jn,qn=function(){var n=[];return{all:n,findByName:function(e){return n.find((function(n){return n.name===e}))}}}(),Pn=function(){function n(e,t,r){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.name=e,this.rarity=t,this.ingredients=n.cost(r),this.type="unique",qn.all.push(this)}var e,t,r;return e=n,t=[{key:"breakdown",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,e=[],t={};return this.ingredients.forEach((function(r){t={},"resource"===r.item.type&&(t.item=r.item,t.amount=r.amount*n,e.push(t)),"recipe"===r.item.type&&r.item.breakdown().forEach((function(o){(t={}).item=o.item,t.amount=o.amount*r.amount*n,t.parent=r.item.name,e.push(t)})),"compound"===r.item.type&&r.item.breakdown().forEach((function(o){(t={}).item=o.item,t.amount=o.amount*r.amount*n,t.parent=r.item.name,e.push(t)})),"exotic"===r.item.type&&r.item.breakdown().forEach((function(o){(t={}).item=o.item,t.amount=o.amount*r.amount*n,t.parent=r.item.name,e.push(t)}))})),e}},{key:"consolidate",value:function(){var n=this.breakdown().reduce((function(n,e){var t=e.item.name;return null==n[t]&&(n[t]=0),n[t]+=e.amount,n}),{}),e=Object.entries(n),t=[];return e.forEach((function(n){var e={};e.item=v.findByName(n[0]),e.amount=n[1],t.push(e)})),t}}],r=[{key:"cost",value:function(n){var e=[];return n.forEach((function(n){var t={};t.item=n[0],t.amount=n[1],e.push(t)})),e}}],t&&Nn(e.prototype,t),r&&Nn(e,r),Object.defineProperty(e,"prototype",{writable:!1}),n}(),Tn=v.findByName("indicite"),On=v.findByName("lithium"),zn=v.findByName("caesium"),Dn=v.findByName("solvent"),Un=v.findByName("aldumite"),Mn=v.findByName("rothicite"),Zn=v.findByName("memory substrate"),In=v.findByName("biosuppressant"),Rn=v.findByName("lubricant"),Vn=v.findByName("veryl"),Xn=v.findByName("vytinium"),Gn=v.findByName("plutonium"),Qn=v.findByName("ytterbium"),Yn=M.findByName("drilling rig"),Wn=M.findByName("supercooled magnet"),Fn=M.findByName("austentic manifold"),Hn=M.findByName("semimetal wafer"),Jn=M.findByName("molecular sieve"),_n=cn.findByName("microsend regulator"),Kn=cn.findByName("sterile nanotubes"),$n=cn.findByName("nuclear fuel rod"),ne=(new Pn("aldumite drilling-rig","unique",[[_n,1],[Un,4],[Yn,1],[zn,2]]),new Pn("indicite wafer","unique",[[Tn,4],[Hn,1],[zn,2],[Dn,2]])),ee=(new Pn("rothicite magnet","unique",[[Mn,4],[Hn,1],[Wn,1],[On,2]]),new Pn("substrate molucule sieve","unique",[[Kn,2],[Zn,3],[Jn,1],[In,2]]),new Pn("veryl-treated manifold","unique",[[Qn,2],[Fn,1],[Rn,2],[Vn,4]]),new Pn("vytinium fuel rod","unique",[[$n,1],[Xn,4],[ne,1],[Gn,2]]),kn=document.createElement("div"),Sn=-1,Ln=function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=(document.querySelector(".recipe-container"),document.querySelector(".craft-container")),o=document.querySelector(".details-container"),i=document.createElement("input");i.classList.add("craft-quantity"),r.classList.add("show"),o.classList.add("show"),r.replaceChildren(""),o.replaceChildren(""),document.querySelectorAll(".resource-card").forEach((function(n){n.classList.remove("selected")})),n.currentTarget.classList.add("selected");var a=document.createElement("div");a.classList.add("craft-content"),e.ingredients.forEach((function(n){var e=document.createElement("div");e.classList.add("craft-card");var r=document.createElement("div");r.classList.add("craft-ingredient"),r.textContent=n.item.name;var o=document.createElement("div");o.classList.add("craft-amount"),o.textContent=n.amount*t,e.appendChild(r),e.appendChild(o),a.appendChild(e)})),e.consolidate().forEach((function(n){var e=document.createElement("div");e.classList.add("details-card");var r=document.createElement("div");r.classList.add("details-ingredient"),r.textContent=n.item.name,n.parent&&(r.textContent+=" (".concat(n.parent,")"));var i=document.createElement("div");i.classList.add("details-amount"),i.textContent=n.amount*t,e.appendChild(r),e.appendChild(i),o.appendChild(e)}));var c=document.createElement("div");c.classList.add("craft-label");var u=document.createElement("div");u.classList.add("craft-title"),u.textContent="".concat(e.name),i.value=t,c.appendChild(u),c.appendChild(i),jn(i),r.appendChild(c),r.appendChild(a)},jn=function(n){n.addEventListener("change",(function(n){Ln(n,Sn,n.target.value),Array.from(document.querySelectorAll(".resource-card")).find((function(n){return n.getAttribute("data-name")==Sn.name})).classList.add("selected")}))},function(){kn.classList.add("resource-container");var n=document.createElement("div");n.classList.add("page-title"),n.textContent="Crafts";var e=document.createElement("div");e.classList.add("resource-content");var t=document.createElement("input");t.classList.add("search-bar"),t.placeholder="search...",kn.appendChild(n),kn.appendChild(t),kn.appendChild(e),document.body.appendChild(kn)}(),{render:function(n){var e,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"All";document.querySelector(".page-title").textContent=t,function(n){var e=n,t=document.createElement("div");t.classList.add("recipe-container");var r=document.createElement("div");r.classList.add("craft-container"),t.appendChild(r);var o=document.createElement("div");o.classList.add("details-container"),t.appendChild(o),kn.appendChild(t),e.forEach((function(n,e){var t=document.createElement("div"),r=document.createElement("div"),o=document.createElement("div"),i=n.name;r.textContent=i,t.addEventListener("click",(function(e){Sn=n,Ln(e,n)})),t.addEventListener("focusin",(function(e){Sn=n,Ln(e,n)})),t.tabIndex=-1,t.classList.add("resource-card"),t.classList.add(n.rarity),t.classList.add(n.type),r.classList.add("resource-card-title"),o.classList.add("resource-card-content"),t.appendChild(r),t.setAttribute("data-name",i),t.appendChild(o),document.querySelector(".resource-content").appendChild(t),0==e&&t.focus()}))}(n),e=document.querySelector(".search-bar"),window.addEventListener("keydown",(function(n){console.log(n.code),console.log(document.activeElement);var t=document.querySelector(".craft-quantity"),r=Array.from(document.querySelectorAll(".resource-card:not(.hide)"));console.log(r);var o=r.find((function(n){return n.classList.contains("selected")}));void 0===o&&(o=r[0]);var i=r.indexOf(o),a={ArrowDown:1,ArrowUp:-1};0===r.length?((document.activeElement.body||document.activeElement.classList.contains("craft-quantity"))&&"ArrowUp"===n.code&&(console.log("empty up"),n.preventDefault(),e.focus(),e.select()),(document.activeElement.body||document.activeElement.classList.contains("search-bar"))&&"ArrowDown"===n.code&&(console.log("empty down"),n.preventDefault(),t.focus(),t.select())):document.activeElement.classList.contains("craft-quantity")?("ArrowUp"===n.code&&(console.log("input-up"),n.preventDefault(),e.focus(),e.select()),"ArrowLeft"!==n.code&&"ArrowDown"!==n.code||(console.log(o),n.preventDefault(),o.focus())):document.activeElement.classList.contains("search-bar")?("ArrowDown"===n.code&&o.focus(),"Enter"===n.code&&(null==t||t.focus(),t.select())):0!==r.length&&(a[n.code]?(a[n.code]&&(i+=a[n.code]),-1==i&&(i=r.length-1),i==r.length&&(i=0),(o=r[i]).focus()):"Enter"!==n.code&&"ArrowRight"!==n.code||("ArrowRight"===n.code&&n.preventDefault(),null==t||t.focus(),null==t||t.select(),t.select()))})),function(){var n=document.querySelector(".search-bar"),e=Array.from(document.querySelectorAll(".resource-card"));n.addEventListener("input",(function(){var t=[];e.forEach((function(e){e.classList.add("hide"),e.classList.remove("selected"),e.getAttribute("data-name").includes(n.value)&&(e.classList.remove("hide"),t.push(e)),console.log(t)})),void 0!==t[0]&&t[0].classList.add("selected")}))}()}});function te(n){return te="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},te(n)}function re(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,(void 0,o=function(n,e){if("object"!==te(n)||null===n)return n;var t=n[Symbol.toPrimitive];if(void 0!==t){var r=t.call(n,"string");if("object"!==te(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(n)}(r.key),"symbol"===te(o)?o:String(o)),r)}var o}var oe=function(){var n=[];return{all:n,findByName:function(e){return n.find((function(n){return n.name===e}))}}}(),ie=function(){function n(e,t,r){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.name=e,this.rarity=t,this.ingredients=n.cost(r),this.type="building",oe.all.push(this)}var e,t,r;return e=n,t=[{key:"breakdown",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,e=[],t={};return this.ingredients.forEach((function(r){t={},"resource"===r.item.type&&(t.item=r.item,t.amount=r.amount*n,e.push(t)),"recipe"===r.item.type&&r.item.breakdown().forEach((function(o){(t={}).item=o.item,t.amount=o.amount*r.amount*n,t.parent=r.item.name,e.push(t)})),"compound"===r.item.type&&r.item.breakdown().forEach((function(o){(t={}).item=o.item,t.amount=o.amount*r.amount*n,t.parent=r.item.name,e.push(t)})),"exotic"===r.item.type&&r.item.breakdown().forEach((function(o){(t={}).item=o.item,t.amount=o.amount*r.amount*n,t.parent=r.item.name,e.push(t)}))})),e}},{key:"consolidate",value:function(){var n=this.breakdown().reduce((function(n,e){var t=e.item.name;return null==n[t]&&(n[t]=0),n[t]+=e.amount,n}),{}),e=Object.entries(n),t=[];return e.forEach((function(n){var e={};e.item=v.findByName(n[0]),e.amount=n[1],t.push(e)})),t}}],r=[{key:"cost",value:function(n){var e=[];return n.forEach((function(n){var t={};t.item=n[0],t.amount=n[1],e.push(t)})),e}}],t&&re(e.prototype,t),r&&re(e,r),Object.defineProperty(e,"prototype",{writable:!1}),n}(),ae=v.findByName("benzene"),ce=v.findByName("iron"),ue=v.findByName("copper"),me=v.findByName("aluminum"),le=v.findByName("membrane"),de=v.findByName("tungsten"),se=v.findByName("nickel"),fe=v.findByName("lubricant"),pe=v.findByName("cobalt"),ye=v.findByName("xenon"),Ae=v.findByName("tantalum"),be=v.findByName("beryllium"),ge=v.findByName("argon"),ve=v.findByName("titanium"),he=v.findByName("sealant"),Be=v.findByName("alkanes"),we=v.findByName("chlorine"),Ee=v.findByName("fiber"),Ce=v.findByName("adhesive"),xe=v.findByName("cosmetic"),Ne=E.findByName("adaptive frame"),ke=E.findByName("zero wire"),Se=E.findByName("reactive gauge"),Le=E.findByName("tau grade rheostat"),je=E.findByName("isotopic coolant"),qe=E.findByName("isocentered magnet"),Pe=M.findByName("drilling rig"),Te=M.findByName("supercooled magnet"),Oe=M.findByName("austentic manifold"),ze=M.findByName("semimetal wafer"),De=M.findByName("comm relay"),Ue=M.findByName("paramagnon conductor");new ie("extractor liquid mk1","building",[[ae,1],[le,4],[me,1]]),new ie("extractor liquid mk2","building",[[ae,1],[le,4],[me,1]]),new ie("extractor solid mk1","building",[[de,4],[ce,1],[me,2]]),new ie("extractor solid mk2","building",[[je,2],[Pe,1],[de,4],[Ne,3]]),new ie("extractor gas mk1","building",[[ae,1],[le,4],[me,1]]),new ie("extractor gas mk2","building",[[ze,2],[Ne,3],[Oe,1],[Ae,4]]),new ie("solar array","building",[[be,2],[ue,3],[me,4]]),new ie("wind turbine","building",[[se,3],[pe,2],[me,5]]),new ie("wind turbine - advanced","building",[[qe,2],[me,5]]),new ie("fueled generator","building",[[Oe,1],[de,4],[qe,1],[Le,1]]),new ie("powered switch","building",[[ue,2],[me,2]]),new ie("industrial light post","building",[[ye,4],[Ne,4],[ke,3]]),new ie("light post","building",[[ye,2],[ue,3],[me,4]]),new ie("industrial wall light","building",[[ge,1],[ue,1],[me,1]]),new ie("transfer container","building",[[de,1],[ce,1],[fe,1]]),new ie("storage - solid","building",[[ce,6],[Ne,3],[me,5]]),new ie("storage - solid - medium","building",[[ce,10],[Ne,5],[me,8]]),new ie("storage - liquid","building",[[se,5],[Ne,3],[me,6]]),new ie("storage - liquid - medium","building",[[se,8],[Ne,5],[me,10]]),new ie("storage - gas","building",[[de,5],[Ne,3],[ue,6]]),new ie("storage - gas - medium","building",[[de,8],[Ne,5],[ue,10]]),new ie("warehouse - small","building",[[Ne,3],[ve,5],[me,6]]),new ie("warehouse - medium","building",[[Ne,5],[ve,8],[me,10]]),new ie("simple fabricator","building",[[he,2],[de,4],[ke,3],[me,8]]),new ie("compound fabricator","building",[[de,8],[Ce,4],[ke,5],[je,2]]),new ie("industrial workbench","building",[[ce,3],[me,4]]),new ie("cooking station","building",[[Be,3],[ce,4],[ue,3]]),new ie("pharmaceutical lab","building",[[we,4],[ce,3],[ae,3],[me,4]]),new ie("weapon workbench","building",[[he,3],[se,2],[ce,4],[Ce,3]]),new ie("spacesuit workbench","building",[[Ee,3],[xe,4],[me,4]]),new ie("research lab","building",[[be,2],[ue,2],[me,4]]),new ie("scan booster","building",[[be,2],[ue,3],[me,4]]),new ie("scan booster - advanced","building",[[qe,1],[De,1],[ke,3],[me,5]]),new ie("scan booster - millitary grade","building",[[Ue,1],[Te,1],[De,2],[me,6]]),new ie("cargo link","building",[[be,2],[ce,20],[ke,2],[me,12]]),new ie("cargo link - inter-system","building",[[ce,20],[Se,3],[De,1],[me,12]]),new ie("crew station","building",[[se,3],[ce,2],[me,5]]),new ie("landing pad with shipbuilder","building",[[be,2],[ce,30],[Ne,18],[ke,2]]),new ie("landing pad - small","building",[[ce,2],[me,2]]),new ie("mission board","building",[[be,2],[ke,2],[me,4]]),new ie("self-service bounty clearance","building",[[be,2],[ue,2],[me,4]]);var Me=oe.all.concat(E.all,M.all,cn.all,qn.all);console.log(oe),ee.render(Me)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,